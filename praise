#!/usr/bin/env python3

import os
import ast
import sys
import zlib
import json
import pprint
import linecache
import collections


class ScopedFinder(ast.NodeVisitor):
    def __init__(self, locations):
        self.locations = locations
        self.current_file = ""
        self.current_scope = []

    def hashed(self, node):
        node_str = ast.dump(node)
        node_bytes = node_str.encode()
        return f"{zlib.adler32(node_bytes) & 0xffff:04x}"


    def changed(self, path, lineno):
        try:
            line = linecache.getline(path, int(lineno))
            did_change = "raise" not in line and "assert" not in line
        except Exception as e:
            did_change = True

        return did_change

    def visit_fuss(self, node):
        self.current_scope.append(node.name)
        self.generic_visit(node)
        self.current_scope.pop()
    visit_FunctionDef = visit_ClassDef = visit_fuss

    def visit_rass(self, node):
        hash_code = self.hashed(node)
        scope_path = '.'.join(self.current_scope)
        # the node.lineno might become outdated, but as we'll see later on - that's 100% ok
        new_node_exists_at = f"{self.current_file}:{scope_path}:{node.lineno}"
        if (node_exists_at := self.locations.get(hash_code)) is not None:
            if node_exists_at != new_node_exists_at:
                exists_path, _, exists_lineno = node_exists_at.split(':')
                if self.changed(exists_path, exists_lineno):
                    self.locations[hash_code + "_old"] = node_exists_at
                    self.locations[hash_code] = new_node_exists_at
        else:
            self.locations[hash_code] = new_node_exists_at
        self.generic_visit(node)
    visit_Raise = visit_Assert = visit_rass


def find_raise_assert_statements(existing_mapping=None):
    finder = ScopedFinder(existing_mapping or {})

    for root, _, files in os.walk('.'):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                with open(file_path) as f:
                    source = f.read()
                    tree = ast.parse(source, filename=file_path)
                    finder.current_file = file_path
                    finder.visit(tree)

    return finder.locations


def find_and_write_failure_points(existing_mapping=None):
    if existing_mapping is None:
        with open("praise.json", 'w') as jpraise:
            new_mapping = find_raise_assert_statements()
            json.dump(new_mapping, jpraise)
    else:
        new_mapping = find_raise_assert_statements(existing_mapping)
        with open("praise.json", 'w') as jpraise:
            json.dump(new_mapping, jpraise)

    return len(new_mapping)


def inverse(mapping, key=None):
    new_mapping = collections.defaultdict(list)
    for k, v in mapping.items():
        filepath, scope, lineno = v.split(':')
        if key is None or key == "file+scope+line":
            new_mapping[v].append(k)
        elif key == "file":
            new_mapping[filepath].append(k)
        elif key == "scope":
            new_mapping[scope].append(k)
        elif key == "file+scope":
            new_mapping[filepath +':'+ scope].append(k)
        elif key == "file+line":
            new_mapping[filepath +':'+ lineno].append(k)

    return dict(new_mapping)


def group(by=None, mapping=None):
    return inverse(mapping, by)


def history(mapping, query):
    return {
        k:v for k,v in mapping.items()
        if query in v
    }


def lookup(mapping, entry):
    matches = {}
    if mapped := mapping.get(entry):
        matches[entry] = mapped
    if mapped := mapping.get(entry + "_old"):
        matches[entry + "_old"] = mapped
    return matches


def entrypoint():
    try:
        with open("praise.json") as jpraise:
            existing_mapping = json.load(jpraise)
    except FileNotFoundError:
        existing_mapping = None

    argc = len(sys.argv)
    if argc == 1:
        count = find_and_write_failure_points(existing_mapping)
        print(f"wrote {count} entries to praise.json")
        return

    # tell me to use argparse one more time & i will punch u in the face
    flag = sys.argv[1]
    if not flag.startswith("--"):
        print("praise can only work from the cwd. further available flags are: ")
        flag = "--help"

    if flag == "--help":
        print(
            "--lookup to get a value of a given hash from the praise mapping",
            "--inverse to get the inverse of the existing json, values as keys",
            '--groupby <OPTIONAL["file" | "scope" | "file+scope" | "file+line"]> group keys by values. without a subargument it is equivalent to --inverse',
            "--history [some/file/path | some.scope | some/file/path:some.scope | some/file/path:someline] get hashes whose value matches the given argument",
            "--print to pretty print the mapping",
            "--help to get this help",
            sep='\n'
        )

    elif flag == "--print":
        pprint.pprint(existing_mapping)

    elif flag == "--lookup":
        subflag = sys.argv[2]
        mapping = lookup(existing_mapping, entry=subflag)
        pprint.pprint(mapping)

    elif flag == "--inverse":
        mapping = inverse(existing_mapping)
        pprint.pprint(mapping)

    elif flag == "--groupby":
        subflag = sys.argv[2] if argc == 3 else None
        mapping = group(by=subflag, mapping=existing_mapping)
        pprint.pprint(mapping)

    elif flag == "--history":
        subflag = sys.argv[2]
        matches = history(mapping=existing_mapping, query=subflag)
        pprint.pprint(matches)


if __name__ == '__main__':
    entrypoint()
