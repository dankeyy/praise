#!/usr/bin/env python3

import os
import ast
import zlib


class ScopedFinder(ast.NodeVisitor):
    def __init__(self):
        self.locations = {}
        self.current_file = ""
        self.current_scope = []

    def hashed(self, node):
        node_str = ast.dump(node)
        node_bytes = node_str.encode()
        return f"{zlib.adler32(node_bytes) & 0xffff:04x}"

    def visit_fuss(self, node):
        self.current_scope.append(node.name)
        self.generic_visit(node)
        self.current_scope.pop()
    visit_FunctionDef = visit_ClassDef = visit_fuss

    def visit_rass(self, node):
        hash_code = self.hashed(node)
        scope_path = '.'.join(self.current_scope)
        # the node.lineno might become outdated, but as we'll see later on - that's 100% ok
        code_identifier  = f":{scope_path}:{node.lineno}"
        self.locations[hash_code] = self.current_file + code_identifier
        self.generic_visit(node)
    visit_Raise = visit_Assert = visit_rass


def find_raise_assert_statements(root_dir):
    finder = ScopedFinder()

    for root, _, files in os.walk(root_dir):
        for file in files:
            if file.endswith('.py'):
                file_path = os.path.join(root, file)
                with open(file_path) as f:
                    source = f.read()
                    tree = ast.parse(source, filename=file_path)
                    finder.current_file = file_path
                    finder.visit(tree)

    return finder.locations


results = find_raise_assert_statements('.')
print(results)
